{% extends "base.html.j2" %}

{% block title %}Página de Upload{% endblock %}

{% block body %}
<div x-data="uploadPage()" x-init="init()">

  <!-- Overlay -->
  <div id="overlay" x-show="loading"
    class="fixed inset-0 bg-black bg-opacity-50 text-white text-2xl flex items-center justify-center z-50">
    Processando...
  </div>

  <header class="p-4 bg-blue-500 text-white text-center text-2xl">
    Upload de Arquivo
  </header>

  <main class="p-4">
    <form method="POST" enctype="multipart/form-data" action="{{ url_for('upload') }}" @submit="loading = true">

      <!-- Área de upload -->
      <div id="dropzone" @click="$refs.fileInput.click()" @dragover.prevent="$el.classList.add('bg-gray-200')"
        @dragleave.prevent="$el.classList.remove('bg-gray-200')" @drop.prevent="handleDrop($event)"
        class="border-4 border-dashed border-gray-400 flex items-center justify-center h-40vh my-4 cursor-pointer transition">
        <input type="file" name="file" x-ref="fileInput" class="hidden" @change="handleFile($event)">
        <div class="text-center">
          <template x-if="!fileInfo">
            <span>Arraste ou clique para selecionar um arquivo</span>
          </template>
          <template x-if="fileInfo">
            <span x-text="fileInfo"></span>
          </template>
        </div>
      </div>

      <div class="text-center">
        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded" :disabled="!fileInfo">Enviar</button>
      </div>
    </form>

    <!-- Mensagem após envio -->
    <div x-cloak x-show="downloadUrl && !loading" class="mt-6 text-center text-green-700">
      <p>
        O download deve iniciar automaticamente.<br>
        Se não acontecer,
        <a :href="downloadUrl" class="underline font-semibold">clique aqui para baixar o relatório</a>.
      </p>
    </div>
    
    <!-- Mensagem de erro -->
    {% if error_message %}
    <div class="mt-6 text-center text-red-500">
      <p>{{ error_message }}</p>
    </div>
    {% endif %}
  </main>
</div>

<script>
  function uploadPage() {
    return {
      loading: false,
      fileInfo: '',
      downloadUrl: '{{ download_url | default("") }}',
      init() {
        if (this.downloadUrl) {
          setTimeout(() => {
            window.location.href = this.downloadUrl;
          }, 1000);
        }
      },
      handleFile(event) {
        const file = event?.dataTransfer?.files?.[0] || event?.target?.files?.[0];
        if (!file) return;

        // Garante que o input seja atualizado corretamente
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        this.$refs.fileInput.files = dataTransfer.files;

        const sizeMB = (file.size / (1024 * 1024)).toFixed(2);
        this.file = file;
        this.fileInfo = `${file.name} - ${sizeMB} MB`;

        if (file.type === 'application/pdf') {
          const reader = new FileReader();
          reader.onload = () => {
            const typedarray = new Uint8Array(reader.result);
            pdfjsLib.getDocument({ data: typedarray }).promise.then(pdf => {
              this.fileInfo += ` - ${pdf.numPages} página(s)`;
            }).catch(err => {
              console.error("Erro ao ler PDF:", err);
            });
          };
          reader.readAsArrayBuffer(file);
        }
        this.downloadUrl = '';
      },
      handleDrop(event) {
        const file = event.dataTransfer.files[0];
        if (!file) return;

        // Prepara o input para envio
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        this.$refs.fileInput.files = dataTransfer.files;

        const sizeMB = (file.size / (1024 * 1024)).toFixed(2);
        this.file = file;
        this.fileInfo = `${file.name} - ${sizeMB} MB`;
        this.downloadUrl = '';

        if (file.type === 'application/pdf') {
          const reader = new FileReader();
          reader.onload = () => {
            const typedarray = new Uint8Array(reader.result);
            pdfjsLib.getDocument({ data: typedarray }).promise.then(pdf => {
              this.fileInfo += ` - ${pdf.numPages} página(s)`;
            }).catch(err => {
              console.error("Erro ao ler PDF:", err);
            });
          };
          reader.readAsArrayBuffer(file);
        }
      }
    }
  }
</script>
{% endblock %}